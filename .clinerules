# Cline's Project Intelligence & Rules for VibeFlow

## Core Directives
1.  **Memory Bank is Paramount:** ALWAYS read ALL memory bank files (`projectbrief.md`, `productContext.md`, `systemPatterns.md`, `techContext.md`, `activeContext.md`, `progress.md`, `AudioFlowDiagram.md`, and any others in `memory-bank/`) at the start of EVERY session. My effectiveness depends entirely on this.
2.  **Prioritize Functionality and Speed:** Every feature, design choice, and implementation must support optimal performance and intuitive usability. The user experience should be frictionless, with zero unnecessary latency or complexity. If any user suggestions or requests compromise these core principles, I must remind them immediately and suggest alternatives.
3.  **Adhere to `AudioFlowDiagram.md`:** Always check `memory-bank/AudioFlowDiagram.md` and do not deviate from the documented flow without explicit instruction and updating the diagram. (Note: Currently, this diagram represents the general system data flow).
4.  **Systematic Problem Solving:** When resolving issues, think recursively and systematically. Consider all dependencies and potential impacts of changes across the codebase. Verify fixes maintain overall system architecture integrity.
5.  **Documentation First:** Update Memory Bank files (especially `activeContext.md` and `progress.md`) *before* or *immediately after* implementing significant changes, discovering new patterns, or when context needs clarification. If the user explicitly says "update memory bank", review ALL memory bank files.
6.  **Incremental Updates to `.clinerules`:** This file is a living document. Add new rules, patterns, or preferences as they are discovered and validated.

## Project-Specific Patterns & Learnings
*(This section will be populated as the project progresses and patterns emerge)*

*   **Initial Setup (Date: 2025-06-11):**
    *   Created all core Memory Bank files.
    *   `AudioFlowDiagram.md` currently reflects the general system data flow from `systemPatterns.md`.
*   **Technology Choices (Date: 2025-06-11):**
    *   Frontend Framework: **React**
    *   Authentication Provider: **Google Cloud Identity Platform**
*   **Cloud Run Deployment Pattern for Nginx (Date: 2025-06-12):**
    *   To deploy Nginx-based applications (like the React frontend) to Google Cloud Run, which assigns a dynamic `$PORT`:
        1.  Modify `nginx.conf` to use a placeholder (e.g., `listen ${PORT};`) and save it as `nginx.conf.template`.
        2.  Create an `entrypoint.sh` script that:
            *   Uses `envsubst '${PORT}' < /path/to/nginx.conf.template > /etc/nginx/conf.d/default.conf` to substitute the runtime `$PORT` variable into the Nginx config.
            *   Starts Nginx (e.g., `exec nginx -g 'daemon off;'`).
        3.  In the `Dockerfile`:
            *   Ensure `gettext` package (which provides `envsubst`) is installed (e.g., `RUN apk add --no-cache gettext` on Alpine).
            *   Copy `nginx.conf.template` and `entrypoint.sh` into the image.
            *   Make `entrypoint.sh` executable.
            *   Set `ENTRYPOINT` to the `entrypoint.sh` script.
    *   Cloud Build trigger "Source location" for Dockerfile should point to the directory containing the Dockerfile (e.g., `vibeflow-frontend/Dockerfile`), which then becomes the build context.

## Tool Usage Preferences
*(This section will be populated with preferred ways of using tools for this project)*

*   **File Edits:** Default to `replace_in_file` for targeted changes. Use `write_to_file` for new files or complete overwrites. Always use the `final_file_content` from the tool response as the basis for subsequent `SEARCH` blocks in `replace_in_file`.

## User Preferences & Workflow
*(This section will be populated based on interactions and feedback)*

*   User emphasizes adherence to their custom instructions, particularly regarding Memory Bank usage and the `AudioFlowDiagram.md`.

## Known Challenges & Considerations (from `progress.md`)
*   Clarification needed on the specific meaning of "Audio Flow" for `AudioFlowDiagram.md` if it's different from the general system data flow. (Currently using general system flow).
*   Backend tech stack decision (e.g., Node.js/Express or Python/FastAPI) is still pending.
*   AI Model selection and access details need to be finalized.
